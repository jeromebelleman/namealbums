#! /usr/bin/env python

'''
Name albums
'''

import sys
import os
import argparse
import subprocess
import tempfile
import logging
import re
import shutil
import yaml
import exifread
import tqdm

GOODRE = re.compile(r'^\d{4}s?(?:-\d\d(?:-\d\d)?)? ')
RETIME = re.compile(r'[ :]')

class NoExif(Exception):
    '''
    Missing EXIF exception
    '''
    pass


def setexiftime(sampling, othertags, path):
    '''
    Set EXIF time in sampling
    '''

    # Get suitable time tag
    try:
        with open(path) as fhl:
            tags = exifread.process_file(fhl)
            for tag in 'EXIF DateTimeOriginal', 'Image DateTime':
                if tag in tags and str(tags[tag]):
                    time = RETIME.split(str(tags[tag]))
                    break
            else:
                othertags.update(set(tags))
                raise NoExif

        # Set the sampling
        if time < sampling['oldest']:
            sampling['oldest'] = time
        if time > sampling['newest']:
            sampling['newest'] = time
    except IOError:
        raise NoExif


def exreport(tmp, dryrun):
    '''
    Execute report
    '''

    with open(tmp.name) as fhl:
        src = None
        paths = []
        for line in fhl:
            line = line.strip()

            if line and not src:
                src = line
                paths.append(line)
            elif line.startswith('@move '):
                dst = ' '.join(line.split()[1:])

                if not os.path.isdir(dst):
                    print 'mkdir -p %s' % dst
                    if not dryrun:
                        os.makedirs(dst)

                for path in paths:
                    basename = os.path.basename(path)
                    if not os.path.lexists('%s/%s' % (dst, basename)):
                        print 'mv %s %s' % (path, dst)
                        if not dryrun:
                            shutil.move(path, dst)
            elif line.startswith('@rename '):
                dst = ' '.join(line.split()[1:])
                if src != dst and not os.path.lexists(dst):
                    print 'mv "%s" "%s"' % (src, dst)
                    if not dryrun:
                        os.rename(src, dst)
                else:
                    print >> sys.stderr, "%s already exists" % dst
            elif not line:
                src = None
                paths = []
            else:
                paths.append(line)


def splitext(path):
    '''
    Split into (root, ext) with ext without the dot, stripped and lowercase
    '''

    root, ext = os.path.splitext(path)

    # Strip against files with trailing space
    return root, ext[1:].strip().lower()


def mksampling(cfg, sampling, othertags, otherexts, root, files):
    '''
    Make sampling
    '''

    for fle in files:
        path = '%s/%s' % (root, fle)
        fleroot, ext = splitext(fle)
        try:
            if ext in cfg['exts']:
                setexiftime(sampling, othertags, path)
                sampling['method'] = 'Direct'
                break
            else:
                otherexts.add(ext)
        except NoExif:
            if cfg['searchrelated']:
                for subroot, _, subfiles in os.walk(os.getcwd()):
                    for subfle in subfiles:
                        path = '%s/%s' % (subroot, subfle)
                        if re.match(fleroot[:-1] + '.*', subfle):
                            if splitext(subfle)[1] in cfg['exts']:
                                try:
                                    setexiftime(sampling, othertags, path)
                                    sampling['method'] = 'From %s' % path
                                    break
                                except NoExif:
                                    pass
                            else:
                                otherexts.add(ext)


def report(tmp, album, sampling):
    '''
    Report
    '''

    # Print files
    print >> tmp, album
    for root, _, files in os.walk(album):
        for filename in files:
            print >> tmp, '%s/%s' % (root, filename)

    # Print suggestion
    if sampling['newest'] == ['0']:
        print >> tmp, "rename %s" % album
    else:
        dirname = os.path.dirname(album)
        print >> tmp, sampling['method']
        print >> tmp, "From %s-%s-%s to %s-%s-%s" % \
            (sampling['oldest'][0],
             sampling['oldest'][1],
             sampling['oldest'][2],
             sampling['newest'][0],
             sampling['newest'][1],
             sampling['newest'][2])
        print >> tmp, "rename %s%s-%s-%s %s" % \
            (dirname + '/' if dirname else '',
             sampling['oldest'][0],
             sampling['oldest'][1],
             sampling['oldest'][2],
             os.path.basename(album))

    print >> tmp


def main():
    '''
    Main loop
    '''

    # Parse arguments
    parser = argparse.ArgumentParser(description="Name albums.")
    parser.add_argument('directory', nargs='+', help="album directory")
    parser.add_argument('--dryrun', action='store_true')
    args = parser.parse_args()

    # Load config
    try:
        with open(os.path.expanduser('~/.namealbums.yaml')) as fhl:
            cfg = yaml.load(fhl)
    except IOError, exc:
        print >> sys.stderr, exc
        return 1

    # Hide messages from tqdm
    logging.basicConfig(level=logging.CRITICAL)

    # Open temporary file
    tmp = tempfile.NamedTemporaryFile()

    # Find files
    othertags = set()
    otherexts = set()
    for album in tqdm.tqdm(args.directory):
        if os.path.isdir(album):
            if not (cfg['skipgood'] and GOODRE.match(os.path.basename(album))):
                sampling = {'oldest': ['9'], 'newest': ['0']}
                for root, _, files in os.walk(album):
                    mksampling(cfg, sampling, othertags, otherexts,
                               root, sorted(files))
                    mksampling(cfg, sampling, othertags, otherexts,
                               root, sorted(files, reverse=True))

                # Write to report
                report(tmp, album, sampling)

    # Report on other tags
    if othertags:
        print >> tmp, "Couldn't always find expected time tags. Found:"
        for tag in othertags:
            print >> tmp, "    %s" % tag

    # Report on other extensions
    if otherexts:
        print >> tmp, "Skipped extensions:"
        for ext in otherexts:
            print >> tmp, "    '%s'" % ext

    # Review and execute report
    tmp.flush()
    subprocess.call(['vim', '+set ft=namealbums'] + cfg['vim'] + [tmp.name])
    exreport(tmp, args.dryrun)


if __name__ == '__main__':
    sys.exit(main())
