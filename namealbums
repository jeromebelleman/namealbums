#! /usr/bin/env python

'''
Name albums
'''

import sys
import os
import argparse
import subprocess
import tempfile
import logging
import re
import yaml
import exifread
import tqdm

GOODRE = re.compile(r'^\d{4}s?(?:-\d\d(?:-\d\d)?)? ')
RETIME = re.compile(r'[ :]')

class NoExif(Exception):
    pass

def getexiftime(othertags, tags):
    '''
    Get time from EXIF
    '''

    for tag in 'EXIF DateTimeOriginal', 'Image DateTime':
        if tag in tags:
            return RETIME.split(str(tags[tag]))
    othertags.update(set(tags))
    raise NoExif


def exreport(tmp, dryrun):
    '''
    Execute report
    '''

    with open(tmp.name) as fhl:
        src = None
        for line in fhl:
            line = line.strip()

            if line and not src:
                src = line
            elif src and line.startswith('@mv '):
                dst = line[4:]
                if src != dst and not os.path.lexists(dst):
                    print 'mv "%s" "%s"' % (src, dst)
                    if not dryrun:
                        os.rename(src, dst)
                else:
                    print >> sys.stderr, "%s already exists" % dst
            elif not line:
                src = None


def mksampling(cfg, sampling, othertags, otherexts, root, files):
    '''
    Make sampling
    '''

    for fle in files:
        path = '%s/%s' % (root, fle)

        # Strip against files with trailing space
        fleroot, ext = os.path.splitext(fle)
        ext = ext[1:].strip().lower()
        if ext in cfg['exts']:
            try:
                with open(path) as fhl:
                    try:
                        tags = exifread.process_file(fhl)
                        if tags:
                            time = getexiftime(othertags, tags)
                            if time < sampling['oldest']:
                                sampling['oldest'] = time
                            if time > sampling['newest']:
                                sampling['newest'] = time
                            sampling['method'] = 'Direct'
                            return
                        else:
                            raise NoExif
                    except NoExif:
                        if cfg['searchrelated']:
                            for subroot, _, subfiles in os.walk(os.getcwd()):
                                for fle in subfiles:
                                    path = '%s/%s' % (subroot, fle)
                                    if re.match(fleroot[:-1] + '.*', fle):
                                        ext = os.path.splitext(fle)[1]
                                        ext = ext[1:].strip().lower()
                                        if ext in cfg['exts']:
                                            try:
                                                with open(path) as fhl:
                                                    tags = exifread.process_file(fhl)
                                                    if tags:
                                                        try:
                                                            time = getexiftime(othertags, tags)
                                                            if time < sampling['oldest']:
                                                                sampling['oldest'] = time
                                                            if time > sampling['newest']:
                                                                sampling['newest'] = time
                                                            sampling['method'] = 'From %s' % path
                                                            return
                                                        except NoExif:
                                                            pass
                                            except IOError:
                                                pass
            except IOError:
                pass
        otherexts.add(ext)


def report(tmp, album, sampling):
    '''
    Report
    '''

    # Print tree
    # Setting stdout to tmp appears to overwrite part of tmp
    proc = subprocess.Popen(['tree', '--noreport', album],
                            stdout=subprocess.PIPE)
    for line in proc.stdout:
        print >> tmp, line,

    # Print suggestion
    if sampling['newest'] == ['0']:
        print >> tmp, "mv %s" % album
    else:
        dirname = os.path.dirname(album)
        print >> tmp, sampling['method']
        print >> tmp, "From %s-%s-%s to %s-%s-%s" % \
            (sampling['oldest'][0],
             sampling['oldest'][1],
             sampling['oldest'][2],
             sampling['newest'][0],
             sampling['newest'][1],
             sampling['newest'][2])
        print >> tmp, "mv %s%s-%s-%s %s" % \
            (dirname + '/' if dirname else '',
             sampling['oldest'][0],
             sampling['oldest'][1],
             sampling['oldest'][2],
             os.path.basename(album))

    print >> tmp


def main():
    '''
    Main loop
    '''

    # Parse arguments
    parser = argparse.ArgumentParser(description="Name albums.")
    parser.add_argument('directory', nargs='+', help="album directory")
    parser.add_argument('--dryrun', action='store_true')
    args = parser.parse_args()

    # Load config
    try:
        with open(os.path.expanduser('~/.namealbums.yaml')) as fhl:
            cfg = yaml.load(fhl)
    except IOError, exc:
        print >> sys.stderr, exc
        return 1

    # Hide messages from tqdm
    logging.basicConfig(level=logging.CRITICAL)

    # Open temporary file
    tmp = tempfile.NamedTemporaryFile()

    # Find files
    othertags = set()
    otherexts = set()
    for album in tqdm.tqdm(args.directory):
        if os.path.isdir(album):
            if not (cfg['skipgood'] and GOODRE.match(os.path.basename(album))):
                sampling = {'oldest': ['9'], 'newest': ['0']}
                for root, _, files in os.walk(album):
                    mksampling(cfg, sampling, othertags, otherexts,
                               root, sorted(files))
                    mksampling(cfg, sampling, othertags, otherexts,
                               root, sorted(files, reverse=True))

                # Write to report
                report(tmp, album, sampling)

    # Report on other tags
    if othertags:
        print >> tmp, "Couldn't always find expected time tags. Found:"
        for tag in othertags:
            print >> tmp, "    %s" % tag

    # Report on other extensions
    if otherexts:
        print >> tmp, "Skipped extensions:"
        for ext in otherexts:
            print >> tmp, "    '%s'" % ext

    # Review and execute report
    tmp.flush()
    subprocess.call(['vim', '+set ft=namealbums'] + cfg['vim'] + [tmp.name])
    exreport(tmp, args.dryrun)


if __name__ == '__main__':
    sys.exit(main())
